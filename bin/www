#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('lafleur:server');
var http = require('http');
const ejs=require("ejs")
const fs =require("fs")
let type=[
  {
    name:"bulbe",
    option:{
      users:[
        {
        link:"/bulbe",name:"Bulbe"
      },{
        link:"/massif",name:"Massif"
      },{
        link:"/rosiers",name:"Rosiers"
      }
      ],produit:[
        {
          photo:"/images/bulbes_begonia.jpg",
          reference:"1",
          designation:"bégonia",
          prix:0
        }, {
          photo:"/images/bulbes_dahlia.jpg",
          reference:"1",
          designation:"dahlia",
          prix:0
        }, {
          photo:"/images/bulbes_glaieul.jpg",
          reference:"1",
          designation:"glaieul",
          prix:0
        }
      ]
}
},{
  name:"massif",
  option:{
    users:[
      {
      link:"/bulbe",name:"Bulbe"
    },{
      link:"/massif",name:"Massif"
    },{
      link:"/rosiers",name:"Rosiers"
    }
    ],produit:[
      {
        photo:"/images/massif_marguerite.jpg",
        reference:"1",
        designation:"bégonia",
        prix:0
      }, {
        photo:"/images/massif_melange.jpg",
        reference:"1",
        designation:"dahlia",
        prix:0
      }, {
        photo:"/images/massif_pensée.jpg",
        reference:"1",
        designation:"glaieul",
        prix:0
      }
    ]
}
},{
  name:"rosiers",
  option:{
    users:[
      {
      link:"/bulbe",name:"Bulbe"
    },{
      link:"/massif",name:"Massif"
    },{
      link:"/rosiers",name:"Rosiers"
    }
    ],produit:[
      {
        photo:"/images/rosiers_arbuste.jpg",
        reference:"1",
        designation:"bégonia",
        prix:0
      }, {
        photo:"/images/rosiers_gdfleur.jpg",
        reference:"1",
        designation:"dahlia",
        prix:0
      }, {
        photo:"/images/rosiers_parfum.jpg",
        reference:"1",
        designation:"glaieul",
        prix:0
      }
    ]
}
}

]
const build=ejs.compile(fs.readFileSync("./views/bulbe.html").toString())
type.map((nam)=>{
  fs.writeFileSync(`./v1/${nam.name}.html`,build(nam.option))
})
fs.writeFileSync("./v1/accueil.html",ejs.compile(fs.readFileSync("./views/index.html").toString())({users:[
  {
  link:"/bulbe",name:"Bulbe"
},{
  link:"/massif",name:"Massif"
},{
  link:"/rosiers",name:"Rosiers"
}
]}))
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
